; ModuleID = 'kayte_program_x86_64'
source_filename = "kayte_program.kayte"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx14.0.0"

; --- External Runtime Function Declarations ---
declare void @kayte_print_string(i8*)
declare void @kayte_show_form(i8*)
declare i8* @kayte_get_control_text(i8*, i8*)
declare i1 @kayte_string_equal(i8*, i8*)
declare void @kayte_close_form(i8*)
declare i8* @kayte_concat_strings(i8*, i8*)

; --- Global String Literals ---
@.str.start_app = private unnamed_addr constant [25 x i8] c"Starting Kayte application!\00", align 1
@.str.login_form_name = private unnamed_addr constant [10 x i8] c"LoginForm\00", align 1
@.str.guest = private unnamed_addr constant [6 x i8] c"guest\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c"123\00", align 1
@.str.admin = private unnamed_addr constant [6 x i8] c"admin\00", align 1
@.str.welcome_admin = private unnamed_addr constant [16 x i8] c"Welcome, admin!\00", align 1
@.str.edit_username = private unnamed_addr constant [12 x i8] c"EditUsername\00", align 1
@.str.edit_password = private unnamed_addr constant [12 x i8] c"EditPassword\00", align 1
@.str.password = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.login_success_button = private unnamed_addr constant [27 x i8] c"Login successful via button!\00", align 1
@.str.login_failed_button = private unnamed_addr constant [25 x i8] c"Login failed via button!\00", align 1
@.str.form_closed = private unnamed_addr constant [13 x i8] c"Form closed.\00", align 1

; --- Global Variables (for simplicity, often better to manage via stack/heap) ---
@MyIntegerVar = common global i64 0, align 8
@MyStringVar = common global i8* null, align 8
@AnotherVar = common global i8* null, align 8
@ImplicitVar = common global i8* null, align 8
@EnteredUser = common global i8* null, align 8
@EnteredPass = common global i8* null, align 8

; --- Main Program Entry Point ---
define void @kayte_main() !dbg !7 {
entry:
  ; Option Explicit On (Directive - no direct IR, affects compiler behavior)
  ; DIM MyIntegerVar (Declaration - handled by global/alloca and debug info)
  ; DIM MyStringVar, AnotherVar AS STRING (Declaration - handled by global/alloca and debug info)

  ; MyIntegerVar = 123
  store i64 123, i64* @MyIntegerVar, align 8, !dbg !15

  ; PRINT MyIntegerVar
  %0 = load i64, i64* @MyIntegerVar, align 8, !dbg !16
  %1 = call i8* @kayte_int_to_string(i64 %0), !dbg !16 ; Assuming a runtime helper for int to string
  call void @kayte_print_string(i8* %1), !dbg !16

  ; MyStringVar = "Hello" & " World!"
  %2 = getelementptr inbounds ([7 x i8], [7 x i8]* @.str.hello, i64 0, i64 0), !dbg !17
  %3 = getelementptr inbounds ([7 x i8], [7 x i8]* @.str.world, i64 0, i64 0), !dbg !17
  %4 = call i8* @kayte_concat_strings(i8* %2, i8* %3), !dbg !17
  store i8* %4, i8** @MyStringVar, align 8, !dbg !17

  ; PRINT MyStringVar
  %5 = load i8*, i8** @MyStringVar, align 8, !dbg !18
  call void @kayte_print_string(i8* %5), !dbg !18

  ; Option Explicit Off (Directive - no direct IR, affects compiler behavior)

  ; ImplicitVar = "I am implicitly declared"
  %6 = getelementptr inbounds ([25 x i8], [25 x i8]* @.str.implicit_declared, i64 0, i64 0), !dbg !19
  store i8* %6, i8** @ImplicitVar, align 8, !dbg !19

  ; PRINT ImplicitVar
  %7 = load i8*, i8** @ImplicitVar, align 8, !dbg !20
  call void @kayte_print_string(i8* %7), !dbg !20

  ; IF 5 > 3 THEN PRINT "Condition is true"
  %8 = icmp sgt i64 5, 3, !dbg !21 ; Compare 5 > 3
  br i1 %8, label %if.then, label %if.end, !dbg !21

if.then:
  %9 = getelementptr inbounds ([19 x i8], [19 x i8]* @.str.condition_true, i64 0, i64 0), !dbg !22
  call void @kayte_print_string(i8* %9), !dbg !22
  br label %if.end, !dbg !22

if.end:
  ; SHOW LoginForm
  %10 = getelementptr inbounds ([10 x i8], [10 x i8]* @.str.login_form_name, i64 0, i64 0), !dbg !23
  call void @kayte_show_form(i8* %10), !dbg !23

  ; END
  ret void, !dbg !24
}

; --- Event Handler: HandleLoginButton ---
define void @HandleLoginButton() !dbg !25 {
entry:
  ; LET EnteredUser = GetControlText("LoginForm", "EditUsername")
  %0 = getelementptr inbounds ([10 x i8], [10 x i8]* @.str.login_form_name, i64 0, i64 0), !dbg !26
  %1 = getelementptr inbounds ([12 x i8], [12 x i8]* @.str.edit_username, i64 0, i64 0), !dbg !26
  %2 = call i8* @kayte_get_control_text(i8* %0, i8* %1), !dbg !26
  store i8* %2, i8** @EnteredUser, align 8, !dbg !26

  ; LET EnteredPass = GetControlText("LoginForm", "EditPassword")
  %3 = getelementptr inbounds ([10 x i8], [10 x i8]* @.str.login_form_name, i64 0, i64 0), !dbg !27
  %4 = getelementptr inbounds ([12 x i8], [12 x i8]* @.str.edit_password, i64 0, i64 0), !dbg !27
  %5 = call i8* @kayte_get_control_text(i8* %3, i8* %4), !dbg !27
  store i8* %5, i8** @EnteredPass, align 8, !dbg !27

  ; IF EnteredUser = "admin" AND EnteredPass = "password" THEN
  %6 = load i8*, i8** @EnteredUser, align 8, !dbg !28
  %7 = getelementptr inbounds ([6 x i8], [6 x i8]* @.str.admin, i64 0, i64 0), !dbg !28
  %8 = call i1 @kayte_string_equal(i8* %6, i8* %7), !dbg !28

  %9 = load i8*, i8** @EnteredPass, align 8, !dbg !29
  %10 = getelementptr inbounds ([9 x i8], [9 x i8]* @.str.password, i64 0, i64 0), !dbg !29
  %11 = call i1 @kayte_string_equal(i8* %9, i8* %10), !dbg !29

  %12 = and i1 %8, %11, !dbg !30 ; Logical AND of both conditions
  br i1 %12, label %if.then.login, label %if.else.login, !dbg !30

if.then.login:
  ; PRINT "Login successful via button!"
  %13 = getelementptr inbounds ([27 x i8], [27 x i8]* @.str.login_success_button, i64 0, i64 0), !dbg !31
  call void @kayte_print_string(i8* %13), !dbg !31
  br label %if.end.login, !dbg !31

if.else.login:
  ; PRINT "Login failed via button!"
  %14 = getelementptr inbounds ([25 x i8], [25 x i8]* @.str.login_failed_button, i64 0, i64 0), !dbg !32
  call void @kayte_print_string(i8* %14), !dbg !32
  br label %if.end.login, !dbg !32

if.end.login:
  ret void, !dbg !33
}

; --- Event Handler: HandleCancelButton ---
define void @HandleCancelButton() !dbg !34 {
entry:
  ; CloseForm("LoginForm")
  %0 = getelementptr inbounds ([10 x i8], [10 x i8]* @.str.login_form_name, i64 0, i64 0), !dbg !35
  call void @kayte_close_form(i8* %0), !dbg !35

  ; PRINT "Form closed."
  %1 = getelementptr inbounds ([13 x i8], [13 x i8]* @.str.form_closed, i64 0, i64 0), !dbg !36
  call void @kayte_print_string(i8* %1), !dbg !36

  ret void, !dbg !37
}

; --- String Literals for Debugging (if not already defined) ---
@.str.hello = private unnamed_addr constant [7 x i8] c"Hello \00"
@.str.world = private unnamed_addr constant [7 x i8] c"World!\00"
@.str.implicit_declared = private unnamed_addr constant [25 x i8] c"I am implicitly declared\00"
@.str.condition_true = private unnamed_addr constant [19 x i8] c"Condition is true\00"

; --- Debug Info Metadata ---
!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_M_Pascal, file: !1, producer: "Kayte Compiler v0.1 (LLVM)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !{}, retainedTypes: !{}, globals: !{}, imports: !{})
!1 = !DIFile(filename: "kayte_program.kayte", directory: "/path/to/your/kayte/project") ; <<< IMPORTANT: Adjust directory
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{!"Kayte Compiler (LLVM backend)"}

!7 = distinct !DISubprogram(name: "kayte_main", scope: !1, file: !1, line: 3, type: !8, isLocal: false, isDefinition: true, scopeLine: 3, isOptimized: false, unit: !0, retainedNodes: !{})
!8 = !DISubroutineType(types: !9)
!9 = !{null} ; Void return type

; Local variables for kayte_main (conceptual, if they were local to main)
; !10 = !DILocalVariable(name: "MyIntegerVar", scope: !7, file: !1, line: 6, type: !11)
; !11 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
; !12 = !DILocalVariable(name: "MyStringVar", scope: !7, file: !1, line: 7, type: !13)
; !13 = !DIBasicType(name: "string", size: 64, encoding: DW_ATE_UTF) ; Conceptual string type

; Global variable debug info (if they were global, as in the example)
!14 = !DIGlobalVariableExpression(var: !DIGlobalVariable(name: "MyIntegerVar", scope: !0, file: !1, line: 6, type: !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed), isLocal: false, isDefinition: true), expr: !DIExpression())
!15 = !DILocation(line: 9, column: 1, scope: !7) ; MyIntegerVar = 123
!16 = !DILocation(line: 10, column: 1, scope: !7) ; PRINT MyIntegerVar
!17 = !DILocation(line: 12, column: 1, scope: !7) ; MyStringVar = "Hello" & " World!"
!18 = !DILocation(line: 13, column: 1, scope: !7) ; PRINT MyStringVar
!19 = !DILocation(line: 17, column: 1, scope: !7) ; ImplicitVar = "I am implicitly declared"
!20 = !DILocation(line: 18, column: 1, scope: !7) ; PRINT ImplicitVar
!21 = !DILocation(line: 20, column: 1, scope: !7) ; IF 5 > 3 THEN
!22 = !DILocation(line: 20, column: 15, scope: !7) ; PRINT "Condition is true" (inside IF)
!23 = !DILocation(line: 21, column: 1, scope: !7) ; SHOW LoginForm
!24 = !DILocation(line: 23, column: 1, scope: !7) ; END

!25 = distinct !DISubprogram(name: "HandleLoginButton", scope: !1, file: !1, line: 25, type: !8, isLocal: false, isDefinition: true, scopeLine: 25, isOptimized: false, unit: !0, retainedNodes: !{})
!26 = !DILocation(line: 26, column: 1, scope: !25) ; LET EnteredUser = GetControlText(...)
!27 = !DILocation(line: 27, column: 1, scope: !25) ; LET EnteredPass = GetControlText(...)
!28 = !DILocation(line: 28, column: 1, scope: !25) ; IF EnteredUser = "admin"
!29 = !DILocation(line: 28, column: 25, scope: !25) ; AND EnteredPass = "password"
!30 = !DILocation(line: 28, column: 1, scope: !25) ; IF condition
!31 = !DILocation(line: 29, column: 5, scope: !25) ; PRINT "Login successful..."
!32 = !DILocation(line: 31, column: 5, scope: !25) ; PRINT "Login failed..."
!33 = !DILocation(line: 33, column: 1, scope: !25) ; END SUB

!34 = distinct !DISubprogram(name: "HandleCancelButton", scope: !1, file: !1, line: 35, type: !8, isLocal: false, isDefinition: true, scopeLine: 35, isOptimized: false, unit: !0, retainedNodes: !{})
!35 = !DILocation(line: 36, column: 1, scope: !34) ; CloseForm("LoginForm")
!36 = !DILocation(line: 37, column: 1, scope: !34) ; PRINT "Form closed."
!37 = !DILocation(line: 38, column: 1, scope: !34) ; END SUB

