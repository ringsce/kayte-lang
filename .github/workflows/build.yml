name: Kayte Project CI Build (FPC Only)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build the macOS Universal Binary (x86_64 + arm64) using FPC and lipo
  build_macos_universal:
    name: Build macOS Universal (Intel + ARM)
    runs-on: macos-13 # macOS 13 (Intel) can cross-compile to ARM64. macOS-14 is Apple Silicon native.

    env:
      PROJECT_NAME_KAYTE: Kayte              # Main executable from Kayte.lpr
      PROJECT_NAME_VB6_INTERPRETER: vb6interpreter # Executable from vb6interpreter.lpr
      BUILD_DIR: projects                     # Directory containing your .lpr files relative to repository root
      OUTPUT_BIN_DIR: build_artifacts         # Output directory for consolidated binaries
      UNIVERSAL_APP_NAME_KAYTE: Kayte-macos-universal # Name for the combined universal Kayte binary
      UNIVERSAL_APP_NAME_VB6_INTERPRETER: vb6interpreter-macos-universal # Name for the combined universal VB6 interpreter binary

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Output Directory
        run: mkdir -p ${{ env.OUTPUT_BIN_DIR }}

      - name: Install Free Pascal (macOS)
        run: |
          FPC_VERSION="3.2.2" # Adjust FPC version as needed
          # Using x86_64-macosx for the Intel macOS-13 runner
          FPC_TAR_GZ="fpc-${FPC_VERSION}.x86_64-macosx.tar"
          FPC_INSTALL_DIR="/usr/local/fpc/${FPC_VERSION}" # Standard installation path

          echo "Downloading FPC ${FPC_VERSION} for macOS x86_64..."
          # Attempt direct download from SourceForge
          curl -LO "https://downloads.sourceforge.net/project/freepascal/Source/${FPC_VERSION}/fpc-${FPC_VERSION}.x86_64-macosx.tar" || \
          # Fallback to FTP mirror if SourceForge direct link fails (less common, but good to have)
          curl -LO "https://ftp.freepascal.org/pub/fpc/dist/${FPC_VERSION}/i386-macosx/${FPC_TAR_GZ}" # Note: i386-macosx is common for x86_64 on FPC FTP

          echo "Extracting FPC..."
          sudo mkdir -p "${FPC_INSTALL_DIR}"
          # Extract and strip top-level directory to place contents directly into FPC_INSTALL_DIR
          sudo tar -xvf "${FPC_TAR_GZ}" -C "${FPC_INSTALL_DIR}" --strip-components=1

          # Add FPC bin directory to GitHub Actions PATH for subsequent steps
          echo "${FPC_INSTALL_DIR}/bin" >> $GITHUB_PATH
          
          # Install ARM64 cross-compiler on the Intel macOS runner
          echo "Installing FPC ARM64 cross-compiler..."
          sudo ${FPC_INSTALL_DIR}/bin/fpcmkcfg -d # Recreate default fpc.cfg if needed
          sudo ${FPC_INSTALL_DIR}/bin/fpc -i # Verify FPC installation
          
          # For FPC cross-compilation, you typically just need the cross-compiler unit packages.
          # The specific way to install cross-compilers depends on your FPC distribution.
          # For FPC >= 3.0.x, it's often:
          sudo ${FPC_INSTALL_DIR}/bin/fpcmake # This command might update compiler configuration
          sudo ${FPC_INSTALL_DIR}/bin/fpc -Fu/usr/local/fpc/3.2.2/lib/fpc/3.2.2/units/aarch64-darwin -WM1 # Make sure aarch64 units are available
          # Or, if using a package manager like Homebrew on macOS for FPC (preferred for simpler setup):
          # brew install fpc
          # brew install fpc-cross-aarch64

          echo "FPC installation and cross-compiler setup complete."

      - name: Build macOS x86_64 Binaries
        run: |
          # Define temporary build directories for FPC output relative to workspace root
          # These variables need to be defined within each `run` block as they are not global env vars for `sh`
          KAYTE_X86_64_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_KAYTE }}/darwin-x86_64"
          VB6_X86_64_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_VB6_INTERPRETER }}/darwin-x86_64"
          
          mkdir -p "${KAYTE_X86_64_FPC_OUT_DIR}"
          mkdir -p "${VB6_X86_64_FPC_OUT_DIR}"

          echo "Building ${{ env.PROJECT_NAME_KAYTE }} for macOS x86_64..."
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_KAYTE }}.lpr -B -O3 -Tdarwin -Px86_64 -FE"${KAYTE_X86_64_FPC_OUT_DIR}" -FU"${KAYTE_X86_64_FPC_OUT_DIR}"
          mv "${KAYTE_X86_64_FPC_OUT_DIR}/${{ env.PROJECT_NAME_KAYTE }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-x86_64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-x86_64"

          echo "Building ${{ env.PROJECT_NAME_VB6_INTERPRETER }} for macOS x86_64..."
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}.lpr -B -O3 -Tdarwin -Px86_64 -FE"${VB6_X86_64_FPC_OUT_DIR}" -FU"${VB6_X86_64_FPC_OUT_DIR}"
          mv "${VB6_X86_64_FPC_OUT_DIR}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-x86_64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-x86_64"

      - name: Build macOS arm64 Binaries
        run: |
          KAYTE_ARM64_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_KAYTE }}/darwin-aarch64"
          VB6_ARM64_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_VB6_INTERPRETER }}/darwin-aarch64"
          
          mkdir -p "${KAYTE_ARM64_FPC_OUT_DIR}"
          mkdir -p "${VB6_ARM64_FPC_OUT_DIR}"

          echo "Building ${{ env.PROJECT_NAME_KAYTE }} for macOS arm64..."
          # Cross-compile from x86_64 to aarch64
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_KAYTE }}.lpr -B -O3 -Tdarwin -Paarch64 -FE"${KAYTE_ARM64_FPC_OUT_DIR}" -FU"${KAYTE_ARM64_FPC_OUT_DIR}"
          mv "${KAYTE_ARM64_FPC_OUT_DIR}/${{ env.PROJECT_NAME_KAYTE }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-arm64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-arm64"

          echo "Building ${{ env.PROJECT_NAME_VB6_INTERPRETER }} for macOS arm64..."
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}.lpr -B -O3 -Tdarwin -Paarch64 -FE"${VB6_ARM64_FPC_OUT_DIR}" -FU"${VB6_ARM64_FPC_OUT_DIR}"
          mv "${VB6_ARM64_FPC_OUT_DIR}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-arm64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-arm64"

      - name: Create macOS Universal Binaries
        run: |
          echo "Creating universal binary: ${{ env.UNIVERSAL_APP_NAME_KAYTE }}..."
          # Combine the x86_64 and arm64 main app binaries from the output directory
          lipo -create -output "${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_KAYTE }}" \
               "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-x86_64" \
               "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-macos-arm64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_KAYTE }}"

          echo "Creating universal binary: ${{ env.UNIVERSAL_APP_NAME_VB6_INTERPRETER }}..."
          # Combine the x86_64 and arm64 interpreter binaries
          lipo -create -output "${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_VB6_INTERPRETER }}" \
               "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-x86_64" \
               "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-macos-arm64"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_VB6_INTERPRETER }}"

      - name: Clean up temporary FPC build directories (macOS)
        if: always() # Always run cleanup regardless of previous step success/failure
        run: |
          rm -rf fpc_build_temp/${{ env.PROJECT_NAME_KAYTE }}
          rm -rf fpc_build_temp/${{ env.PROJECT_NAME_VB6_INTERPRETER }}

      - name: Upload macOS Universal Binaries Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binaries
          path: |
            ${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_KAYTE }}
            ${{ env.OUTPUT_BIN_DIR }}/${{ env.UNIVERSAL_APP_NAME_VB6_INTERPRETER }}
          retention-days: 7


  # Matrix job for building and testing individual binaries (Linux)
  build_matrix:
    name: Build Matrix - ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner_os }}
    strategy:
      fail-fast: false # Allows other matrix jobs to complete even if one fails
      matrix:
        include:
          - os: linux
            arch: amd64
            runner_os: ubuntu-latest
            fpc_os_flag: linux
            fpc_cpu_flag: x86_64
          - os: linux
            arch: arm64
            runner_os: ubuntu-latest
            architecture: arm64 # Specifies ARM64 runner for Linux
            fpc_os_flag: linux
            fpc_cpu_flag: aarch64
          # If you also want individual macOS binaries built here (not universal), define them
          # but consider if they overlap with the universal build.
          # - os: macos
          #   arch: amd64
          #   runner_os: macos-13
          #   fpc_os_flag: darwin
          #   fpc_cpu_flag: x86_64
          # - os: macos
          #   arch: arm64
          #   runner_os: macos-14 # macOS 14 is Apple Silicon native.
          #   fpc_os_flag: darwin
          #   fpc_cpu_flag: aarch64
    env: # Environment variables specific to the matrix jobs
      PROJECT_NAME_KAYTE: Kayte
      PROJECT_NAME_VB6_INTERPRETER: vb6interpreter
      BUILD_DIR: projects # Directory containing your .lpr files relative to repository root
      OUTPUT_BIN_DIR: build_artifacts # Consolidated output directory (relative to workspace root)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Output Directory
        run: mkdir -p ${{ env.OUTPUT_BIN_DIR }}

      - name: Install Free Pascal (${{ matrix.os }})
        run: |
          if [ "${{ matrix.os }}" == "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y fpc fpc-src # Install FPC and source for cross-compilation support
            # Add FPC bin directory to GITHUB_PATH for subsequent steps
            echo "/usr/bin" >> $GITHUB_PATH # FPC is usually in /usr/bin on Ubuntu
          # elif [ "${{ matrix.os }}" == "macos" ]; then
          #   # Installation for macOS for matrix builds (if needed, e.g., on a native ARM64 runner)
          #   # Use similar logic as the `build_macos_universal` job for installation via tar.gz
          #   FPC_VERSION="3.2.2"
          #   FPC_TAR_GZ="fpc-${FPC_VERSION}.x86_64-macosx.tar" # Example for Intel macOS runner
          #   FPC_INSTALL_DIR="/usr/local/fpc/${FPC_VERSION}"
          #   curl -LO "https://downloads.sourceforge.net/project/freepascal/files/Source/${FPC_VERSION}/macOS-x86_64/${FPC_TAR_GZ}"
          #   sudo mkdir -p "${FPC_INSTALL_DIR}"
          #   sudo tar -xvf "${FPC_TAR_GZ}" -C "${FPC_INSTALL_DIR}" --strip-components=1
          #   echo "${FPC_INSTALL_DIR}/bin" >> $GITHUB_PATH
          fi
          # Verify installation
          fpc -i # Should show FPC information

      - name: Build ${{ env.PROJECT_NAME_KAYTE }}
        run: |
          # Define temporary build directories for FPC output
          KAYTE_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_KAYTE }}/${{ matrix.fpc_os_flag }}-${{ matrix.fpc_cpu_flag }}"
          mkdir -p "${KAYTE_FPC_OUT_DIR}"

          echo "Building ${{ env.PROJECT_NAME_KAYTE }} for ${{ matrix.os }}-${{ matrix.arch }}..."
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_KAYTE }}.lpr -B -O3 -T${{ matrix.fpc_os_flag }} -P${{ matrix.fpc_cpu_flag }} -FE"${KAYTE_FPC_OUT_DIR}" -FU"${KAYTE_FPC_OUT_DIR}"
          mv "${KAYTE_FPC_OUT_DIR}/${{ env.PROJECT_NAME_KAYTE }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-${{ matrix.os }}-${{ matrix.arch }}"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-${{ matrix.os }}-${{ matrix.arch }}"

      - name: Build ${{ env.PROJECT_NAME_VB6_INTERPRETER }}
        run: |
          # Define temporary build directories for FPC output
          VB6_FPC_OUT_DIR="fpc_build_temp/${{ env.PROJECT_NAME_VB6_INTERPRETER }}/${{ matrix.fpc_os_flag }}-${{ matrix.fpc_cpu_flag }}"
          mkdir -p "${VB6_FPC_OUT_DIR}"

          echo "Building ${{ env.PROJECT_NAME_VB6_INTERPRETER }} for ${{ matrix.os }}-${{ matrix.arch }}..."
          fpc ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}.lpr -B -O3 -T${{ matrix.fpc_os_flag }} -P${{ matrix.fpc_cpu_flag }} -FE"${VB6_FPC_OUT_DIR}" -FU"${VB6_FPC_OUT_DIR}"
          mv "${VB6_FPC_OUT_DIR}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}" "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-${{ matrix.os }}-${{ matrix.arch }}"
          chmod +x "${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-${{ matrix.os }}-${{ matrix.arch }}"

      - name: Run Tests (if tests/run_linux_tests.sh exists)
        # The 'if' condition is evaluated before the step runs.
        if: success() && steps.check_test_script.outputs.exists == 'true' # Only run if check_test_script confirms existence and previous steps succeeded
        id: run_tests_step # Assign an ID to reference outputs
        run: |
          echo "Running tests for ${{ matrix.os }}-${{ matrix.arch }}..."
          # Example: Run a specific test script, passing the executable path
          # Adjust this path based on where tests/run_linux_tests.sh expects the binaries to be.
          # We're passing the final output path.
          ./tests/run_linux_tests.sh ${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-${{ matrix.os }}-${{ matrix.arch }} ${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-${{ matrix.os }}-${{ matrix.arch }}
        continue-on-error: true # Allow subsequent matrix jobs to continue even if this test fails

      - name: Check if Test Script Exists (for conditional execution)
        id: check_test_script # Assign an ID to output a value
        run: |
          if [ -f tests/run_linux_tests.sh ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "No tests/run_linux_tests.sh found. Skipping tests for ${{ matrix.os }}-${{ matrix.arch }}."
          fi
        shell: bash

      - name: Clean up temporary FPC build directories (Matrix)
        if: always()
        run: |
          rm -rf fpc_build_temp/${{ env.PROJECT_NAME_KAYTE }}/${{ matrix.fpc_os_flag }}-${{ matrix.fpc_cpu_flag }}
          rm -rf fpc_build_temp/${{ env.PROJECT_NAME_VB6_INTERPRETER }}/${{ matrix.fpc_os_flag }}-${{ matrix.fpc_cpu_flag }}

      - name: Upload ${{ matrix.os }}-${{ matrix.arch }} Binaries Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_KAYTE }}-${{ matrix.os }}-${{ matrix.arch }}
            ${{ env.OUTPUT_BIN_DIR }}/${{ env.PROJECT_NAME_VB6_INTERPRETER }}-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 7

  # Final job to aggregate artifacts or perform post-build actions like releases
  # This job depends on the successful completion of all matrix builds.
  finalize_build:
    name: Finalize Build
    runs-on: ubuntu-latest
    needs: [build_macos_universal, build_matrix] # Depends on both previous build jobs

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts # Downloads artifacts into this directory

      - name: List Downloaded Artifacts (for verification)
        run: ls -R downloaded_artifacts

      - name: Perform Finalization Steps (e.g., Release Creation)
        run: |
          echo "All builds completed. Ready for finalization steps."
          # Example: Create a release, package all binaries into a single archive, etc.
          # cd downloaded_artifacts
          # tar -czvf all-kayte-binaries.tar.gz *
          # You can then upload this as a release asset using actions/upload-release-asset or similar.
