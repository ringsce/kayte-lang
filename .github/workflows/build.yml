name: Free Pascal CI

on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Or windows-latest, macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Free Pascal
      run: |
        sudo apt-get update
        sudo apt-get install -y fpc # Install FPC compiler
        # For Lazarus components (like FPImage, FPReadJPG), you might need to
        # install specific Free Pascal packages/components if they are not
        # part of the base FPC install. This often involves downloading/cloning
        # FCL sources and building them, or using package managers.
        # Example for fcl-image components if not auto-installed with fpc:
        # sudo apt-get install -y fpc-src fpc-utils fpc-image # Package names can vary by distro

    - name: Compile Main Project with Static Analysis Checks
      run: |
        # Use full compiler flags for strict checking
        fpc -va -Co -CR -Ci -Ct -Cp KayteIDE.lpr 2> compiler_output.txt
        # You might want to fail the build if there are errors (exit code != 0)
        # For warnings only, this won't fail the build by default.
        # Check the exit code: if [ $? -ne 0 ]; then exit 1; fi
      continue-on-error: true # Don't fail the build immediately on warnings, capture output

    - name: Run Unit Tests
      run: |
        # Compile your test runner
        fpc MyTests.lpr -Fu. # -Fu. to find units in current directory if needed
        # Execute tests and save JUnit XML report
        ./MyTests -junitxml:test_results.xml

    - name: Upload Static Analysis Results (Conceptual for Codacy/SonarQube)
      # This step is highly dependent on how Codacy/SonarQube accepts generic reports.
      # You would typically parse 'compiler_output.txt' into a SARIF or custom JSON format
      # and then use a Codacy/SonarQube CLI or action to upload.
      run: |
        echo "Parsing compiler_output.txt and uploading to Codacy/SonarQube..."
        # Example: if Codacy had a generic issues reporter CLI:
        # codacy-reporter static-analysis -f compiler_output.txt -p free-pascal-parser -o codacy_issues.json
        # Then upload codacy_issues.json
        # For SonarQube, you'd integrate its scanner, which might not be able to parse raw FPC output directly
        # without a custom plugin or pre-parsing.
      continue-on-error: true # Don't fail if this upload step encounters issues

    - name: Upload Test Results to CI Platform
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test_results.xml
