# .github/workflows/build.yml

name: Kayte Project CI Build (FPC Only)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build the macOS Universal Binary (x86_64 + arm64) using FPC and lipo
  build_macos_universal:
    name: Build macOS Universal (Intel + ARM)
    runs-on: macos-13 # macos-13 runs on Intel for now, allowing cross-compilation for ARM64

    env:
      APP_NAME_MAIN: KayteApp          # Main executable from Kayte.lpr
      APP_NAME_INTERPRETER: vb6interpreter # Executable from vb6interpreter.lpr
      BUILD_DIR: .                     # Directory containing your .pas/.lpr files relative to repository root
      UNIVERSAL_APP_NAME: KayteApp-macos-universal # Name for the combined universal binary

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Free Pascal (macOS via ZIP)
        run: |
          FPC_VERSION="3.2.2" # Adjust FPC version as needed
          FPC_TAR_GZ="fpc-<span class="math-inline">\{FPC\_VERSION\}\.x86\_64\-macosx\.tar" \# Intel compiler
FPC\_INSTALL\_DIR\="/usr/local/fpc/</span>{FPC_VERSION}"

          echo "Downloading FPC <span class="math-inline">\{FPC\_VERSION\} for macOS x86\_64\.\.\."
curl \-LO "https\://downloads\.sourceforge\.net/project/freepascal/Source/</span>{FPC_VERSION}/fpc-<span class="math-inline">\{FPC\_VERSION\}\.x86\_64\-macosx\.tar" \|\| \\
curl \-LO "https\://ftp\.freepascal\.org/pub/fpc/dist/</span>{FPC_VERSION}/i386-macosx/<span class="math-inline">\{FPC\_TAR\_GZ\}" \# Fallback FTP
echo "Extracting FPC\.\.\."
sudo mkdir \-p "</span>{FPC_INSTALL_DIR}"
          sudo tar -xvf "<span class="math-inline">\{FPC\_TAR\_GZ\}" \-C "</span>{FPC_INSTALL_DIR}" --strip-components=1 # Extract and strip top-level dir

          echo "Setting FPC in PATH..."
          echo "${FPC_INSTALL_DIR}/bin" >> <span class="math-inline">GITHUB\_PATH
\# Verify installation
fpc \-i \# Should show FPC information
echo "FPC installation complete\."
\- name\: Build macOS x86\_64 Binary \(</span>{{ env.APP_NAME_MAIN }})
        run: |
          cd <span class="math-inline">\{\{ env\.BUILD\_DIR \}\}
\# \-O<OS\> for target OS, \-C<CPU\> for target CPU, \-FE\. for output executable to current directory
fpc "</span>{{ env.APP_NAME_MAIN }}.lpr" -Odarwin -Cx86_64 -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_MAIN \}\}\-x86\_64"
\# Also build the interpreter
fpc "</span>{{ env.APP_NAME_INTERPRETER }}.lpr" -Odarwin -Cx86_64 -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_INTERPRETER \}\}\-x86\_64"
\- name\: Build macOS arm64 Binary \(</span>{{ env.APP_NAME_MAIN }})
        run: |
          cd <span class="math-inline">\{\{ env\.BUILD\_DIR \}\}
\# Cross\-compile from x86\_64 to aarch64
fpc "</span>{{ env.APP_NAME_MAIN }}.lpr" -Odarwin -Caarch64 -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_MAIN \}\}\-arm64"
\# Also build the interpreter
fpc "</span>{{ env.APP_NAME_INTERPRETER }}.lpr" -Odarwin -Caarch64 -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_INTERPRETER \}\}\-arm64"
\- name\: Create macOS Universal Binary \(</span>{{ env.UNIVERSAL_APP_NAME }})
        run: |
          cd <span class="math-inline">\{\{ env\.BUILD\_DIR \}\}
\# Combine the x86\_64 and arm64 main app binaries
lipo \-create \-output "</span>{{ env.UNIVERSAL_APP_NAME }}" "<span class="math-inline">\{\{ env\.APP\_NAME\_MAIN \}\}\-x86\_64" "</span>{{ env.APP_NAME_MAIN }}-arm64"
          chmod +x "<span class="math-inline">\{\{ env\.UNIVERSAL\_APP\_NAME \}\}"
\# Combine the x86\_64 and arm64 interpreter binaries
lipo \-create \-output "</span>{{ env.APP_NAME_INTERPRETER }}-macos-universal" "<span class="math-inline">\{\{ env\.APP\_NAME\_INTERPRETER \}\}\-x86\_64" "</span>{{ env.APP_NAME_INTERPRETER }}-arm64"
          chmod +x "${{ env.APP_NAME_INTERPRETER }}-macos-universal"

      - name: Upload macOS Universal Binaries Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binaries
          path: |
            <span class="math-inline">\{\{ github\.workspace \}\}/</span>{{ env.BUILD_DIR }}/${{ env.UNIVERSAL_APP_NAME }}
            <span class="math-inline">\{\{ github\.workspace \}\}/</span>{{ env.BUILD_DIR }}/${{ env.APP_NAME_INTERPRETER }}-macos-universal
          retention-days: 7


  # Matrix job for building and testing individual binaries (Linux)
  build_matrix:
    name: Build Matrix - <span class="math-inline">\{\{ matrix\.os \}\}\-</span>{{ matrix.arch }}
    runs-on: <span class="math-inline">\{\{ matrix\.runner\_os \}\}
strategy\:
fail\-fast\: false \# Allows other matrix jobs to complete even if one fails
matrix\:
include\:
\- os\: linux
arch\: amd64
runner\_os\: ubuntu\-latest
fpc\_os\_flag\: linux
fpc\_cpu\_flag\: x86\_64
\- os\: linux
arch\: arm64
runner\_os\: ubuntu\-latest
architecture\: arm64 \# Specifies ARM64 runner for Linux
fpc\_os\_flag\: linux
fpc\_cpu\_flag\: aarch64
\# If you also want individual macOS binaries built here \(not universal\), define them
\# but consider if they overlap with the universal build\.
\# \- os\: macos
\#   arch\: amd64
\#   runner\_os\: macos\-13
\#   fpc\_os\_flag\: darwin
\#   fpc\_cpu\_flag\: x86\_64
\# \- os\: macos
\#   arch\: arm64
\#   runner\_os\: macos\-14 \# macOS 14 is ARM64 by default\.
\#   fpc\_os\_flag\: darwin
\#   fpc\_cpu\_flag\: aarch64
env\:
APP\_NAME\_MAIN\: KayteApp
APP\_NAME\_INTERPRETER\: vb6interpreter
BUILD\_DIR\: \. \# Directory containing your \.lpr files relative to repository root
steps\:
\- name\: Checkout Code
uses\: actions/checkout@v4
\- name\: Install Free Pascal \(</span>{{ matrix.os }})
        run: |
          if [ "<span class="math-inline">\{\{ matrix\.os \}\}" \=\= "linux" \]; then
sudo apt\-get update
sudo apt\-get install \-y fpc fpc\-src \# Install FPC and source for cross\-compilation support
\# If matrix includes macOS, you'd add installation logic here similar to the universal job
\# elif \[ "</span>{{ matrix.os }}" == "macos" ]; then
          #   # Installation for macOS for matrix builds (if needed, e.g., on a native ARM64 runner)
          #   FPC_VERSION="3.2.2"
          #   FPC_TAR_GZ="fpc-<span class="math-inline">\{FPC\_VERSION\}\.x86\_64\-macosx\.tar" \# Example for Intel macOS runner
\#   FPC\_INSTALL\_DIR\="/usr/local/fpc/</span>{FPC_VERSION}"
          #   curl -LO "https://downloads.sourceforge.net/project/freepascal/files/Source/<span class="math-inline">\{FPC\_VERSION\}/macOS\-x86\_64/</span>{FPC_TAR_GZ}/download"
          #   sudo mkdir -p "<span class="math-inline">\{FPC\_INSTALL\_DIR\}"
\#   sudo tar \-xvf "</span>{FPC_TAR_GZ}" -C "<span class="math-inline">\{FPC\_INSTALL\_DIR\}" \-\-strip\-components\=1
\#   echo "</span>{FPC_INSTALL_DIR}/bin" >> $GITHUB_PATH
          fi
          # Verify installation
          fpc -i

      - name: Build ${{ env.APP_NAME_MAIN }}
        run: |
          cd <span class="math-inline">\{\{ env\.BUILD\_DIR \}\}
\# Use fpc directly with flags from matrix
fpc "</span>{{ env.APP_NAME_MAIN }}.lpr" --build-mode=Release --os=<span class="math-inline">\{\{ matrix\.fpc\_os\_flag \}\} \-\-cpu\=</span>{{ matrix.fpc_cpu_flag }} -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_MAIN \}\}\-</span>{{ matrix.os }}-<span class="math-inline">\{\{ matrix\.arch \}\}"
chmod \+x "</span>{{ env.APP_NAME_MAIN }}-<span class="math-inline">\{\{ matrix\.os \}\}\-</span>{{ matrix.arch }}"

      - name: Build ${{ env.APP_NAME_INTERPRETER }}
        run: |
          cd <span class="math-inline">\{\{ env\.BUILD\_DIR \}\}
fpc "</span>{{ env.APP_NAME_INTERPRETER }}.lpr" --build-mode=Release --os=<span class="math-inline">\{\{ matrix\.fpc\_os\_flag \}\} \-\-cpu\=</span>{{ matrix.fpc_cpu_flag }} -FE. -o"<span class="math-inline">\{\{ env\.APP\_NAME\_INTERPRETER \}\}\-</span>{{ matrix.os }}-<span class="math-inline">\{\{ matrix\.arch \}\}"
chmod \+x "</span>{{ env.APP_NAME_INTERPRETER }}-<span class="math-inline">\{\{ matrix\.os \}\}\-</span>{{ matrix.arch }}"

      - name: Run Tests (if Makefile has 'test' target)
        run: |
          cd ${{ env.BUILD_DIR }}
          if grep -q "^test:" Makefile; then
            echo "Running tests..."
            # Assuming 'make test' can run tests for the current FPC target or native binary.
            make test
          else
            echo "No 'test' target found in Makefile. Skipping tests."
          fi
        continue-on-error: true # Allow build to continue even if tests fail, but mark as unstable

      - name: Upload <span class="math-inline">\{\{ matrix\.os \}\}\-</span>{{ matrix.arch }} Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-<span class="math-inline">\{\{ matrix\.os \}\}\-</span>{{ matrix.arch }}
          path: |
            <span class="math-inline">\{\{ github\.workspace \}\}/</span>{{ env.BUILD_DIR }}/<span class="math-inline">\{\{ env\.APP\_NAME\_MAIN \}\}\-</span>{{ matrix.os }}-${{ matrix.arch }}
            <span class="math-inline">\{\{ github\.workspace \}\}/</span>{{ env.BUILD_DIR }}/<span class="math-inline">\{\{ env\.APP\_NAME\_INTERPRETER \}\}\-</span>{{ matrix.os }}-${{ matrix.arch }}
          retention-days: 7

  # Final job to aggregate artifacts or perform post-build actions like releases
  finalize_build:
    name: Finalize Build
    runs-on: ubuntu-latest
    needs: [build_macos
