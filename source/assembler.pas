unit Assembler;

{$mode objfpc}{$H+}

interface

uses
  SysUtils, Classes;

type
  { TAssembler }
  // TAssembler is responsible for generating the bytecode for the virtual machine.
  // It receives instructions and data from the parser and appends them
  // to an internal TStringList, which represents the final bytecode.
  TAssembler = class
  private
    FCode: TStringList;
  public
    // Public property to expose the generated bytecode.
    property Code: TStringList read FCode;

    constructor Create;
    destructor Destroy; override;

    // Resets the assembler, clearing all generated code.
    procedure Reset;

    // Emits a single instruction or directive to the bytecode.
    procedure Emit(const AInstruction: string);

    // Emits a byte value (as a string) to the bytecode.
    procedure EmitByte(const AValue: Byte);

    // Emits an integer value (as a string) to the bytecode.
    procedure EmitInt(const AValue: Integer);

    // Emits a floating-point value (as a string) to the bytecode.
    procedure EmitFloat(const AValue: Double);
  end;

implementation

{ TAssembler }

constructor TAssembler.Create;
begin
  inherited Create;
  FCode := TStringList.Create;
end;

destructor TAssembler.Destroy;
begin
  FCode.Free;
  inherited Destroy;
end;

procedure TAssembler.Reset;
begin
  FCode.Clear;
end;

procedure TAssembler.Emit(const AInstruction: string);
begin
  // Add the instruction to the list of bytecode lines.
  FCode.Add(AInstruction);
end;

procedure TAssembler.EmitByte(const AValue: Byte);
begin
  // Convert the byte to a string and add it to the bytecode.
  FCode.Add(IntToStr(AValue));
end;

procedure TAssembler.EmitInt(const AValue: Integer);
begin
  // Convert the integer to a string and add it to the bytecode.
  FCode.Add(IntToStr(AValue));
end;

procedure TAssembler.EmitFloat(const AValue: Double);
begin
  // Convert the float to a string and add it to the bytecode.
  // The format specifier ensures a consistent representation.
  FCode.Add(FloatToStrF(AValue, ffGeneral, 18, 10));
end;

end.

